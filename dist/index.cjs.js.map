{"version":3,"file":"index.cjs.js","sources":["../src/utils/validators.js","../src/utils/textUtils.js","../src/core/canvasTextParagraphs.js","../src/index.js"],"sourcesContent":["export function validateNumber(input, errorMessage) {\n  if (typeof input !== 'number') {\n    throw new Error(errorMessage)\n  }\n}\nexport function validateString(input, errorMessage) {\n  if (typeof input !== 'string') {\n    throw new Error(errorMessage)\n  }\n}\n\nexport function isCanvasContext(ctx) {\n  if (!(ctx instanceof CanvasRenderingContext2D)) {\n    throw new Error('Invalid ctx')\n  }\n}\n\nexport function checkArrayValue(arr, inputValue, errorMessage) {\n  if (!arr.includes(inputValue)) {\n    throw new Error(errorMessage)\n  }\n}","export function wrapText(text, ctx, xStart, maxWidth, indentType, indentWidth) {\n  const words = text.split(' ')\n  let lines = [],\n    currentLine = '';\n\n  for (const word of words) {\n    let testLine = currentLine + word + ' ',\n      testWidth = ctx.measureText(testLine).width;\n    if (indentType === 'firstLine' && lines.length === 0) {\n      testWidth += indentWidth\n    } else if (indentType === 'hanging' && lines.length !== 0) {\n      testWidth += indentWidth\n    }\n    testWidth += xStart\n\n    if (testWidth > maxWidth && currentLine.length > 0) {\n      lines.push(currentLine.trim());\n      currentLine = word + ' '\n    } else {\n      currentLine = testLine\n    }\n  }\n  //latest line\n  lines.push(currentLine.trim())\n\n  return lines;\n}\n\nexport function drawLine(lineObj, ctx, xStart, maxHeight, maxWidth, heightSpace) {\n  const metrics = ctx.measureText(lineObj.text);\n  const align = lineObj.align\n  let x = xStart,\n    yText = lineObj.y,\n    xText = lineObj.x\n  if (yText + heightSpace <= maxHeight) {\n    if (align === 'left') {\n      x += xText\n    } else if (align === 'center') {\n      const widthSpace = (maxWidth - x - metrics.width) / 2\n      if (xText > widthSpace) {\n        x += xText;\n      } else {\n        x += widthSpace\n      }\n    } else if (align === 'right') {\n      const widthSpace = maxWidth - metrics.width\n      if (widthSpace > x + xText) {\n        x = widthSpace;\n      } else {\n        x += xText\n      }\n    } else if (align === 'justify') {\n      const words = lineObj.text.split(' ')\n      const spaceWidth = ((maxWidth - x - xText) - metrics.width + ctx.measureText(' ').width * (words.length - 1)) / (words.length - 1)\n      let currentX = x + xText\n\n      words.forEach((word, index) => {\n        ctx.fillText(word, currentX, yText + heightSpace)\n        if (index < words.length - 1) {\n          currentX += ctx.measureText(word).width + spaceWidth;\n        }\n      });\n      // out from function\n      return;\n    }\n    // Draw text for left, center, and right alignment\n    ctx.fillText(lineObj.text, x, yText + heightSpace);\n  }\n\n}","import { validateNumber, checkArrayValue, isCanvasContext, validateString } from \"../utils/validators\";\n\nimport { wrapText, drawLine } from \"../utils/textUtils\";\n\n/**\n * Draws paragraphs of text on a canvas with various formatting options.\n * \n * @param {string} text - The text to be drawn on the canvas. Must be a valid string.\n * @param {CanvasRenderingContext2D} ctx - The canvas rendering context. Must be an instance of CanvasRenderingContext2D.\n * @param {object} [options={}] - Optional configuration object for formatting the text.\n * @param {number|string} [options.height='auto'] - The height of the text area. Can be a number or 'auto'.\n * @param {number|string} [options.width='auto'] - The width of the text area. Can be a number or 'auto'.\n * @param {string} [options.baseLine='top'] - The baseline alignment of the text. Valid values are 'top', 'hanging', 'middle', 'alphabetic', 'ideographic', 'bottom'.\n * @param {number} [options.xStart=0] - The x-coordinate where the text starts.\n * @param {number} [options.yStart=0] - The y-coordinate where the text starts.\n * @param {string} [options.align='left'] - The horizontal alignment of the text. Valid values are 'left', 'center', 'right', 'justify'.\n * @param {string} [options.verticalAlign='top'] - The vertical alignment of the text. Valid values are 'top', 'middle', 'bottom'.\n * @param {number} [options.spaceBeforeParagraph=0] - The space before each paragraph in pixels.\n * @param {number} [options.spaceAfterParagraph=0] - The space after each paragraph in pixels.\n * @param {number|string} [options.lineSpacing='auto'] - The spacing between lines of text. Can be a number or 'auto'.\n * @param {object} [options.indent={}] - Configuration for text indentation.\n * @param {string} [options.indent.type='none'] - The type of indentation. Valid values are 'none', 'firstLine', 'hanging'.\n * @param {number} [options.indent.by=0] - The number of spaces to indent.\n * \n * @example\n * const canvas = document.getElementById('myCanvas');\n * const ctx = canvas.getContext('2d');\n * const text = \"This is a sample text to draw on the canvas.\";\n * const options = {\n *   width: 400,\n *   height: 300,\n *   baseLine: 'alphabetic',\n *   xStart: 20,\n *   yStart: 20,\n *   align: 'justify',\n *   verticalAlign: 'middle',\n *   spaceBeforeParagraph: 15,\n *   spaceAfterParagraph: 15,\n *   lineSpacing: 1.5,\n *   indent: {\n *     type: 'firstLine',\n *     by: 4\n *   }\n * };\n * canvasTextParagraphs(text, ctx, options);\n */\n\nexport default function canvasTextParagraphs(text, ctx, options = {}) {\n  validateString(text, 'Invalid text')\n  isCanvasContext(ctx)\n\n  const defaultOptions = {\n    height: 'auto',\n    width: 'auto',\n    baseLine: 'top',\n    xStart: 0,\n    yStart: 0,\n    align: 'left',\n    verticalAlign: 'top',\n    spaceBeforeParagraph: 0,\n    spaceAfterParagraph: 0,\n    lineSpacing: 'auto',\n    indent: {\n      type: 'none',\n      by: 0\n    },\n  }\n  const mergedOptions = { ...defaultOptions, ...options }\n  const validBaseLine = [\n    \"top\",\n    \"hanging\",\n    \"middle\",\n    \"alphabetic\",\n    \"ideographic\",\n    \"bottom\",\n  ],\n    validAlign = ['left', 'center', 'right', 'justify'],\n    validIndentType = ['none', 'firstLine', 'hanging'],\n    validVerticalAlign = ['top', 'middle', 'bottom']\n\n  checkArrayValue(validBaseLine, mergedOptions.baseLine, 'Invalid Baseline')\n  checkArrayValue(validAlign, mergedOptions.align, 'Invalid Align')\n  checkArrayValue(validIndentType, mergedOptions.indent.type, 'Invalid indent.type')\n  checkArrayValue(validVerticalAlign, mergedOptions.verticalAlign, 'Invalid verticalAlign')\n\n  validateNumber(mergedOptions.spaceBeforeParagraph, 'Invalid spaceBeforeParagraph')\n  validateNumber(mergedOptions.spaceAfterParagraph, 'Invalid spaceAfterParagraph')\n  validateNumber(mergedOptions.xStart, 'Invalid xStart')\n  validateNumber(mergedOptions.yStart, 'Invalid yStart')\n\n  try {\n    validateNumber(mergedOptions.width, 'Invalid width')\n  } catch (error) {\n    if (mergedOptions.width !== 'auto') {\n      throw new Error('Invalid width')\n    }\n  }\n\n  try {\n    validateNumber(mergedOptions.height, 'Invalid height')\n  } catch (error) {\n    if (mergedOptions.height !== 'auto') {\n      throw new Error('Invalid height')\n    }\n  }\n  validateNumber(mergedOptions.indent.by, 'Invalid indent.by')\n\n  try {\n    validateNumber(mergedOptions.lineSpacing, 'Invalid lineSpacing')\n  } catch (error) {\n    if (mergedOptions.lineSpacing !== 'auto') {\n      throw new Error('Invalid lineSpacing')\n    }\n  }\n\n  let width = ctx.canvas.width,\n    height = ctx.canvas.height\n  if (mergedOptions.width !== 'auto') {\n    width = mergedOptions.width\n  }\n  if (mergedOptions.height !== 'auto') {\n    height = mergedOptions.height\n  }\n\n  const paragraphs = text.split('\\n')\n\n  // ctx processing\n  ctx.textBaseline = mergedOptions.baseLine\n\n  const alphSample = \"aAgG\"\n  const sampleMetrics = ctx.measureText(alphSample)\n  let lineHeight = (sampleMetrics.actualBoundingBoxAscent + sampleMetrics.actualBoundingBoxDescent) + 1\n  if (mergedOptions.lineSpacing !== 'auto') {\n    lineHeight *= mergedOptions.lineSpacing\n  }\n\n  const dataParagraphs = {\n    paragraphs: [],\n    xStart: mergedOptions.xStart,\n    yStart: mergedOptions.yStart,\n    width,\n    height,\n    vAlign: mergedOptions.verticalAlign,\n  }\n\n  let y = dataParagraphs.yStart ?? 0\n  let indentWidth = 0;\n\n  switch (mergedOptions.indent.type) {\n    case 'hanging':\n      indentWidth = ctx.measureText(' '.repeat(mergedOptions.indent.by)).width;\n      break;\n    case 'firstLine':\n      indentWidth = ctx.measureText(' '.repeat(mergedOptions.indent.by)).width;\n      break;\n    case 'none':\n    default:\n      indentWidth = 0;\n      break;\n  }\n\n  for (let i = 0; i < paragraphs.length; i++) {\n    const paragraph = paragraphs[i]\n    const paragraphTrimmed = paragraph.trim()\n    const data = {\n      lines: [],\n      yStart: 0,\n      yEnd: 0,\n    }\n    y += mergedOptions.spaceBeforeParagraph\n    data.yStart = y\n    const lines = wrapText(paragraphTrimmed, ctx, dataParagraphs.xStart, dataParagraphs.width, mergedOptions.indent.type, indentWidth)\n\n    for (let j = 0; j < lines.length; j++) {\n      const line = lines[j];\n      let lineX = 0\n      if (j > 0 && mergedOptions.indent.type === 'hanging') {\n        lineX += indentWidth;\n      } else if (j === 0 && mergedOptions.indent.type === 'firstLine') {\n        lineX += indentWidth\n      }\n      let align = mergedOptions.align\n      if (j === lines.length - 1 && align === 'justify') {\n        align = 'left'\n      }\n\n      data.lines.push({\n        text: line,\n        x: lineX,\n        y,\n        align,\n      })\n      y += lineHeight\n    }\n\n    y += mergedOptions.spaceAfterParagraph\n    data.yEnd = y\n    dataParagraphs.paragraphs.push(data)\n  }\n  //latest yEnd of lates paragraph\n  let paragraphsHeight = dataParagraphs.paragraphs[dataParagraphs.paragraphs.length - 1].yEnd,\n    heightSpace = 0\n\n  if (mergedOptions.verticalAlign === 'middle') {\n    heightSpace = (dataParagraphs.height - paragraphsHeight) / 2\n  } else if (mergedOptions.verticalAlign === 'bottom') {\n    heightSpace = (dataParagraphs.height - paragraphsHeight)\n  }\n\n  // Draw\n  for (const paragraph of dataParagraphs.paragraphs) {\n    for (const line of paragraph.lines) {\n      drawLine(line, ctx, dataParagraphs.xStart, dataParagraphs.height, dataParagraphs.width, heightSpace)\n    }\n  }\n\n}","/**\n * @license\n * MIT License\n * \n * Copyright (c) 2024 Sukron Ch<sukron@sch39.dev>\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport canvasTextParagraphs from \"./core/canvasTextParagraphs\";\n\nexport default canvasTextParagraphs"],"names":["validateNumber","input","errorMessage","validateString","isCanvasContext","ctx","checkArrayValue","arr","inputValue","wrapText","text","xStart","maxWidth","indentType","indentWidth","words","lines","currentLine","word","testLine","testWidth","drawLine","lineObj","maxHeight","heightSpace","metrics","align","x","yText","xText","widthSpace","spaceWidth","currentX","index","canvasTextParagraphs","options","mergedOptions","validBaseLine","validAlign","validIndentType","validVerticalAlign","width","height","paragraphs","sampleMetrics","lineHeight","dataParagraphs","y","i","paragraphTrimmed","data","j","line","lineX","paragraphsHeight","paragraph"],"mappings":"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"}